설계도 (클래스)
객체지향 관점을 잘 이해하는게 중요!!!

JAVA의 인기 = 현실세계를 잘 반영
ㄴ모든걸 객체로서 표현
-객체 => 행동, 특징
-속성(필드)과 행위(메서드)

객체간의 관계
-사용 관계
-포함 관계
-상속 단계*** : 어떠한 Class를 내려받아 공통으로 사용 가능하게 해주는 것

객체지향 프로그래밍 기법 = 필요한 부품들을 만들고 조립해 하나의 완성된 프로그램을 완성함
ㄴ 자동차를 비유로 들면 이해하기 좋다.
-캡슐화 : 속성(필드)과 행위(메서드)를 하나로 묶어 객체(encapsulation)로 만듬 => 필요없는 것의 외부노출을 막아 혼란을 막음, 보안, 객체가 변화하지 않게 함, 접근 제어자(public, private, default등)를 사용.
-상속 : 부모 객체가 가지고있는 속성(필드)과 행위(메서드)를 자식 객체에게 물려줌. => overriding.
    ㄴ각각의 객체를 묶어 구조 파악에 용이해짐
    ㄴ코드 중복의 감소
-다형성 : 하나의 행위(메서드)에 각 객체가 지닌 고유 특성에 따라 여러 형태로 재구성 되는 것 = 메서드의 구현을 다르게 정의
-추상화 : 객체에서 공통된 부분들을 모아 상위 개념으로 새롭게 선언 => 공통적이고 중요한 것들을 모아 객체 리모델링

객체 모델링 : 현실의 객체를 소프트웨어의 객체로 설계하는 것.
객체 간의 협력
ㄴ객체는 서로 상호작용함

매개변수(입력값)

인스턴스 : 클래스를 토대로 생성된 객체 => 과정 : 인스턴스화 ex) 찍어만든 시제품들

설계도용 Class를 가지고 객체를 만들 때 사용하는 new 키워드. - 생성자가 사용됨

ex)------------------
Car

-고유 데이터
+company: String
+model: String
+color: String
+price: double

-상태 데이터
+speed: double
+gear: char
+lights: boolean

-객체 데이터
+tire: Tire
+door: Door
+handle: Handle
---------------------

값을 지정해주지 않으면 각 데이터 타입에 맞는 Default값으로 잡힌다.

클래스에 필드를 정의 => 인스턴스화 => 객체 내의 필드 사용가능
**클래스는 실체가 아니다.**

외부 접근
-Car.car = new Car();
ㄴ도트(.) 연산자를 사용해 객체의 내부 필드에 접근

내부 접근
-double brakePedal() {
    speed = 0; <-- 이거 화살표 왜 했는지 기억이 안남;;?
    return speed;
}
ㄴ메서드 내부에서 바로 호출하여 사용.