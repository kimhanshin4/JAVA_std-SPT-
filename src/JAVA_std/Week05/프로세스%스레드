프로세스와 스레드
프로세스 : 운영체제로부터 자원을 할당받는 작업의 단위
-ex)OS운영체제 내에서 크롬 브라우저를 시작 => 프로세스 1개 실행
프로세스 구조
-OS가 프로그램 실행을 위해 프로세스 할당할 때 Code와 Data, 메모리 영역(Stack, Heap)을 할당해준다.
-Code : Java main메서드 와 같은 코드들
-Data : 프로그램 실행 중 저장 할수 있는 저장공간
    전역변수, 정적변수(static), 배열 등 초기화된 데이터를 저장하는 공간
-메모리 영역
ㄴStack : 지역변수, 매개변수 리턴 변수를 저장
ㄴHeap : 프로그램이 동적으로 필요한 변수를 저장

-Data와 Memory는 성격이 다르다.

스레드 : 프로세스 내에서 일하는 일꾼(코드 실행의 흐름)
-생성 : 프로세스가 작업중인 프로그램에서 실행요청이 들어오면 스레드를 생성, 명령을 처리하도록 한다.
 ex)Thread thread = new Thread(task, "Thread"); // NEW
-스레드의 자원
ㄴ프로세스 내에는 여러 스레드들이 있고, 스레드들은 실행을 위해 프로세스 내 주소공간이나 메모리공간(Heap)을 공유 받는다.
ㄴ각 명령처리를 위한 자신만의 메모리 공간(Stack)도 할당받는다.

Java에서의 스레드 => 기본적으로 위와 비슷하다
-OS 위의 JVM 내에서 실행. Stack, Heap 영역들 동일

멀티 스레드 ↔ 싱글 스레드(지금까지 작업방식)
ex)System.out.println("와 머리 터지겠다~")
Java는 메인 스레드가 main() 메서드를 실행시키면서 시작
-여러개의 스레드를 만들어 동시에 내용을 처리하게 하는 것 => 멀티 스레드 지원
-메인 스레드는 필요에 따라 작업 스레드들을 생성해 병렬로 코드를 실행 시킬 수 있다.

싱글 스레드 : 프로세스 안에서 하나의 스레드만 실행
-JVM의 메인 스레드가 종료되면 JVM도 같이 종료.
멀티 스레드 : 프로세스 내에서 여러개의 스레드가 실행
ㄴ장점
    -여러 작업을 동시에! => 성능 증가
    -스택 제외 모든 영역에서 메모리르 공유 => 자원을 효율적으로 사용 가능
ㄴ단점
    -동기화 문제(충돌) 발생,
    -교착상태(Dead-Lock)발생 : 둘 이상의 스레드가 서로의 자원을 필요로 할 때 서로 작업이 종료되기까지 무한히 기다리게 되는 것

멀티 스레드를 안정적으로 컨트롤 할 수 있는 기법들이 있음.
