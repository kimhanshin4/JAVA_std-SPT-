이쯤에서 다시보는 Collection!!!
제네릭, 인터페이스 관점에서 한 번 살펴보자!
List
-추상적 자료구조로서, 순서를 가지고, 일렬로
배열 => 프로그램 언어에서 지원하는 자료형
-조회는 빠르지만 => 배열의 주소값만 알면 나머지는 빠르게 알 수 있다.
-수정 삭제가 느리다. => 삭제한 값 칸에 뒤 값들을 당겨오는 과정
=>검색에 유리, 수정/삭제에 불리

-추상적 자료구조인 리스트! 개념적으로 보통 다음 연산들을 지원
 - 빈 리스트를 만드는 연산
 - 리스트가 비어있는지 확인하는 연산
 - 리스트의 앞에 원소를 삽입하는 연산
 - 리스트의 뒤에 원소를 삽입하는 연산
 - 리스트의 제일 첫 원소를 알아보는 연산
 - 리스트의 첫 원소를 제외한 나머지 리스트를 알아보는 연산

 리스트 : 인터페이스로서 구현 하지는 않고 메서드만 가지고 있음
 Array리스트 : 리스트의 구현체

상속, 인터페이스, 제네릭 개념을 알고 List를 다루면 더욱 의미가 의미의미 하다.

자바의 컬렉션은 사실 다음과 같은 구조로 구현이 되어 있습니다.
    1. Collection(집합적 자료)라는 속성은 Iterable(순회가능)이라는 속성을 상속받고 있습니다.
    2. Collection의 하위 ‘속성’으로는 List, Queue, Set 등이 있습니다.
    3. List의 실제 구현체들은 Arr, Linked, Vector, Stack들이 있습니다.
    4. 상황에 맞는 적절한 자료구조를 택하는 방법은 다음과 같습니다.
        1. 인터페이스, 즉 속성에서는 코드를 보고 “어떠한 일을 해주는지” 알 수 있습니다.
        2. 클래스, 즉 실제 구현체에는 위의 어떠한 일을 “어떻게 해주는지” 알 수 있습니다.
        3. 즉 내가 지금 데이터를 다루는데 필요한 기능을 어떠한 것들이 해주는지는 인터페이스에서 찾고, 어떠한 방식으로 해줘야 유리할지는 실제 구현체를 보고 판단하면 됩니다.
    5. 사실 가장 좋은 방법은, 자주 코드를 접하며 어떠한 상황에 어떠한 자료구조를 주로 사용하는지 보고, 주로 사용하는 구현체들은 실제 명세를 봐서 어떠한 특징이 있는지 잘 알아두는것이 중요합니다.