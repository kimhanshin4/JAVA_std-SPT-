발생한 문제를 "정의" => "정의"가 정교할 수록 "대응"의 여지가 많아진다!
예외(Exception), 오류(Error)처리를 잘하자! => 정교한 프로그램을 만들어야지!

오류(Error) : 일반적으로 회복이 불가능한 문제
- 시스템레벨 또는 환경적인 이유로 발생
- 코드의 문제로 발생하는 경우(심각), 발생하면 일반적으로 회복 불가
- 에러 발생시 어떠한 에러로 종료되었는지 확인, 대응
예외(Exception) : 일반적으로 회복이 가능
- 미리 예상할 수 있다. => 대응 할 수 있다.
- 예외를 사전에 처리 할 수 있는 로직을 심어 놓아 예방한다.

컴파일 에러
- .java => .class 파일로 컴파일 할 때 발생
- 문법이 틀려서 ㅠ
런타임 에러 Run Time
- Run을 하고 프로그램이 돌아가는 동안 발생하는 에러
- 주로 다루게 될 에러(예외)
ㄴ미리 대처 하는게 중요*****

예외 처리 관점
-확인된 예외 (Checked Exception)
    -컴파일 에러와 헷갈 ㄴㄴ
    -컴파일 시점에 확인하는, 처리하는 예외
    -반드시 예외 처리를 해줘야하는 예외
    -이미 특정 문제를 인지하고 있어, 예외 정의 => 컴파일 하는 동안 예외처리 됬는지 Check
-미확인된 예외 (Unchecked Exception)
    -런타임 시점에 확인됨
    -예외 처리가 반드시 필요하지 않은 예외

프로그래밍 중 "문제" 상황에 직면,
ㄴ>문제를 "회복 가능 여부"에 따라 Error / Exception 구분

이미 JAVA에서 수많은 오류 상황에 대한 예외 처리를 해주고 있다.
=> 그럼 어떤것 들이 예외 구현되어 있는가.

Throable Class
-Object 클래스에서 시작한다.
-자식클래스 Error, Exception클래스
Object<-Throable<-Error_IOError,Exception_IOException,RuntimeException...
-RuntimeException을
    ㄴ상속한 예외들 => UncheckedException,
    ㄴ상속안한 예외들 => Checked Exception


NullPointException *****
ArrayIndexOutOfBoundsException.***** 많이 본다.
NumberFormatException

많은 구현체들이 이미 존재하고, 대부분 상황에 맞는 에러들은 이미 구현완료.
=> 명시적으로 어떤 에러를 내보낼지 찾아보고 결정.
=> 없다면 직접 "정의" "구현".
ex)
public class OurBadException extends Exception {
    public OurBadException () {
        super("위험한 행동을 하면 예외처리를 꼭 해야해!");
    }
}

Chained Exception, 실제 예외 처리하는 방법
-연결된 예외 (Chained Exception)
-예외는 다른 예외를 유발 할 수 있다. init
-원인 예외를 새로운 예외에 등록 후 다시 새로운 예외를 발생시킴 => 예외 연결

예외를 연결하는 이유
-여러 예외를 큰 분류의 예외로 묶어 다루기 위해
-checked exception=>try~catch~finall=>길다
=>unchecked exception=>감싸지 않음
=>unchecked로 checked를 감싼다(포장)
=>코드가 간결해진다.
ex) throw new RuntimeException(new Exception)
initCause해준 내용을 getCause로 잡는다.

원인에대한 이해가 편하다. => tracking 용이

실질적으로 예외 처리
1. 예외 복구 => 최소한의 대응만 가능 => 가장 기본적, 대게 복구 가능상황이 아닌경우가 많다
2. 예외 처리 회피. 내 차례에서 흘리고 다음 로직에서 처리되도록
3. 예외 전환. A예외를 B예외로 전환
ㄴ적절하다. 예외처리를 깊게 자세히 처리할 수 있다.
ㄴRuntimeException 처럼 일괄 처리하기 편한 예외로 바꿔서 던지고 싶을 때 사용

원인 예외를 다루기 위한 메서드
- initCause()
- getCause()